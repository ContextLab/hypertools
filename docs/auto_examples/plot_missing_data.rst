
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_missing_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_missing_data.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_missing_data.py:


=============================
Using the missing_inds function to label interpolated values
=============================

If you have data with missing values, Hypertools will try to interpolate them
using PPCA.  To visualize how well its doing, you can use the missing_inds
function and then highlight the values that were interpolated.  Here, we
generated some synthetic data, removed some values, and then plotted the
original data, data with missing values and highlighted the missing datapoints
with stars.

.. GENERATED FROM PYTHON SOURCE LINES 14-46



.. image-sg:: /auto_examples/images/sphx_glr_plot_missing_data_001.png
   :alt: plot missing data
   :srcset: /auto_examples/images/sphx_glr_plot_missing_data_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/jmanning/hypertools/hypertools/tools/format_data.py:140: UserWarning: Missing data: Inexact solution computed with PPCA (see https://github.com/allentran/pca-magic for details)
      warnings.warn('Missing data: Inexact solution computed with PPCA (see https://github.com/allentran/pca-magic for details)')

    <hypertools.datageometry.DataGeometry object at 0x13339d070>





|

.. code-block:: Python


    # Code source: Andrew Heusser
    # License: MIT

    # import
    from scipy.linalg import toeplitz
    import numpy as np
    from copy import copy
    import hypertools as hyp

    # simulate data
    K = 10 - toeplitz(np.arange(10))
    data1 = np.cumsum(np.random.multivariate_normal(np.zeros(10), K, 250), axis=0)
    data2 = copy(data1)

    # randomly remove 5% of the data
    missing = .01
    inds = [(i,j) for i in range(data1.shape[0]) for j in range(data1.shape[1])]
    missing_data = [inds[i] for i in np.random.choice(int(len(inds)), int(len(inds)*missing))]
    for i,j in missing_data:
        data2[i,j]=np.nan

    # reduce the data
    data1_r,data2_r = hyp.reduce([data1, data2], ndims=3)

    # pull out missing inds
    missing_inds = hyp.tools.missing_inds(data2)
    missing_data = data2_r[missing_inds, :]

    # plot
    hyp.plot([data1_r, data2_r, missing_data], ['-', '--', '*'],
             legend=['Full', 'Missing', 'Missing Points'])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.054 seconds)


.. _sphx_glr_download_auto_examples_plot_missing_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_missing_data.ipynb <plot_missing_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_missing_data.py <plot_missing_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_missing_data.zip <plot_missing_data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
